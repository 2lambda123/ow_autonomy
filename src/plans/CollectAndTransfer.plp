// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

#include "plexil_defs.h"

Real Lookup time;
Real Lookup CollectAndTransferTimeout;
Boolean Lookup SampleGood;

Boolean Lookup StringToBoolean(String);
Real Lookup StringToReal(String);
String Lookup substr(...);
Integer Lookup find_first_of(...);
String Lookup ToString(...);

Command SetCheckpoint(...);
Command Flush;
Command log_info(...);

LibraryAction ImageSampleSite();
LibraryAction Stub(In String desc);
LibraryAction Image(In String desc);
LibraryAction Downlink();
LibraryAction HandleCrash(In String CheckpointName,
                          In String Args,
                          In Boolean IgnoreCrash,
                          InOut String Info);

CollectAndTransfer:
{
  In Boolean IgnoreCrash;
  Real SampleAmount;
  Real Time;
  Boolean CollectMore = true;
  Real LastComplete = 0;

  CrashHandling:{
    String info = "";
    LibraryCall HandleCrash(CheckpointName="CollectAndTransfer",
                            Args="",
                            IgnoreCrash=IgnoreCrash,
                            Info=info);
    SetCollectMoreLastComplete:{
      String more_s;
      String last_complete_s;
      SkipCondition info == "" || !isKnown(info);
      // Split info, which was format LastComplete_DigMore
      last_complete_s = Lookup(substr(info,
                                      0,
                                      Lookup(find_first_of(info,"_"))));
      more_s =          Lookup(substr(info,
                                      Lookup(find_first_of(info,"_"))+1));

      log_info("Loaded previous checkpoint:: Last_complete:",last_complete_s," More:",more_s);
      CollectMore  = Lookup(StringToBoolean(more_s));
      LastComplete = Lookup(StringToReal(last_complete_s));
    }
  }

  // Can assume sample has been dumped if it is invalid
  CollectAndTransfer1:
  {
    InvariantCondition
      Time < (CollectAndTransfer.EXECUTING.START +
              Lookup(CollectAndTransferTimeout));
    RepeatCondition CollectMore;

    Time = Lookup(time);
    
    Collect:
    {
      SkipCondition LastComplete >= 1;
      EndCondition Lookup(SampleGood); // Material Property Sensing
      LibraryCall Stub(desc="Collecting Sample");
      SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(1,"_",CollectMore)));
      Flush();
    }

    ImageSample:
    {
      SkipCondition LastComplete >= 2;
      LibraryCall Stub(desc="Aligning camera and sample");
      LibraryCall Image(desc="sample");
      SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(2,"_",CollectMore)));
      Flush();
    }

    DownlinkSampleImage:
    {
      SkipCondition LastComplete >= 3;
      LibraryCall Downlink();
      SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(3,"_",CollectMore)));
      Flush();
    }
    
    Transfer:
    {
      Dock:
      {
        SkipCondition LastComplete >= 4;
        LibraryCall Stub(desc="Docking");
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(4,"_",CollectMore)));
        Flush();
      }
      Unload:
      {
        SkipCondition LastComplete >= 5;
        LibraryCall Stub(desc="Unloading");
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(5,"_",CollectMore)));
        Flush();
      }
      // TODO: Is this intended to skip Cap/Deliver/Image if CollectMore=true?
      MeasureSample:
      {
        SkipCondition LastComplete >= 6;
        PostCondition !CollectMore;
        LibraryCall Stub(desc="Measuring Sample");
        CollectMore = STUB_FALSE;
        Wait 1;
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(6,"_",CollectMore)));
        Flush();
      }
      CapSample:
      {
        PreCondition !CollectMore; // In case of crash after flush and before previous PostCondition
        SkipCondition LastComplete >= 7;
        LibraryCall Stub(desc="Capping Sample");
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(7,"_",CollectMore)));
        Flush();
      }
      DeliverSample:
      {
        SkipCondition LastComplete >= 8;
        LibraryCall Stub(desc="Delivering Sample");
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(8,"_",CollectMore)));
        Flush();
      }
      ImageSampleSite:
      {
        SkipCondition LastComplete >= 9;
        LibraryCall ImageSampleSite();
        SetCheckpoint("CollectAndTransfer",true,Lookup(ToString(9,"_",CollectMore)));
        Flush();
      }
    }
    // Reset for next repeat
    LastComplete = 0;
  }
  SetCheckpoint("CollectAndTransferEnd",true,"");
  Flush();
}
