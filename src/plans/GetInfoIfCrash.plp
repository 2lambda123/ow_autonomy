// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

LibraryAction CompatibleTime(In Real First,
                 In Real Second,
                 In String CheckpointName,
                 InOut Boolean Result);

Real Lookup CheckpointTime(...);
Integer Lookup CheckpointWhen(String);
String Lookup CheckpointInfo(...);
Boolean Lookup DidCrash;
Real Lookup time;

GetInfoIfCrash:{
  
  In Boolean IgnoreCrash;
  In String CheckpointName;
  InOut Boolean Crashed;
  InOut String Info;
  Crashed = false;
  
  HandleCrash:{
  
    // TODO: Currently, ordering a new execution with the same name (with IgnoreCrash=true) means previously crashed
    // executions will be ignored since the successful new execution will be the most recent.
    // Is this OK?
    Integer latest_start_boot ; // So we know if lookup is UNKNOWN
    Integer latest_end_boot;
    Boolean checked_boots = false;
    Boolean compatible_time = true;
    Boolean exit = false;
  
    ExitCondition !Lookup(DidCrash) // Didn't crash
      || IgnoreCrash // We want to start a new execution even if we crashed during the old one
      || (checked_boots && !isKnown(latest_start_boot)) // Never started
      || (checked_boots && latest_start_boot >= latest_end_boot) // Finished after we last started
      || !compatible_time; // Last execution not relevant


  
    latest_start_boot = Lookup(CheckpointWhen(CheckpointName));
    latest_end_boot = Lookup(CheckpointWhen(CheckpointName+"__End"));
    checked_boots = true;
  
    // Determine if the last execution was relevant
    LibraryCall CompatibleTime(First=Lookup(CheckpointTime(CheckpointName,latest_start_boot)),
                               Second=Lookup(time,1),
                               CheckpointName=CheckpointName,
                               Result=compatible_time);

    // From here on out, we can assume we've crashed
    Info = Lookup(CheckpointInfo(CheckpointName,latest_start_boot));
    Crashed = true;
  }
}
