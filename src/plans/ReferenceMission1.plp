// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// Simplified version of the Europa reference mission.

LibraryAction ImageLandingSite(In String InstanceName,
                               In Boolean IgnoreCrash);
LibraryAction IdentifySampleTarget (InOut Real X,
                                    InOut Real Y,
                                    InOut Boolean Parallel,
                                    InOut Real GroundPos);
LibraryAction DigTrench (In Real X,
                         In Real Y,
                         In Real GroundPos,
                         In Real Length,
                         In Real BiteDepth,
                         In Integer NumPasses,
                         In Boolean Parallel);
LibraryAction RemoveTailings (In Real X,
                              In Real Y,
                              In Real GroundPos,
                              In Boolean Parallel);
LibraryAction CollectSample (In Real X,
                             In Real Y,
                             In Real GroundPos,
                             In Real Depth,
                             In Real Length,
                             In Boolean Parallel);
LibraryAction StartSampleAnalysis;
LibraryAction MonitorBattery (InOut Boolean status);

#include "plan-interface.h"

ReferenceMission1: Concurrence
{
  // Assumption: checkout is complete.

  // Health variables - expand/refine as needed
  Boolean BatteryOK, TemperatureOK;

  ContingencyMonitors: Concurrence
  {
    BatteryMonitor: LibraryCall MonitorBattery (status = BatteryOK);
    ThermalMonitor: LibraryCall Stub(desc="Monitoring thermal");
    UplinkMonitor: LibraryCall Stub(desc="Monitoring for uplinks");
  }

  Mission:
  {
    Real trench_x, trench_y, ground_pos;
    Boolean parallel = true;

    // Length should be twice the radius of the arm/scoop, as documented.
    Real trench_length = 0.6;

    log_info ("Starting Reference Mission 1, Sol 0 ...");
    LibraryCall ImageLandingSite (InstanceName = "ReferenceMission1",
                                  IgnoreCrash = true);
    LibraryCall Unstow();
    LibraryCall IdentifySampleTarget (X = trench_x,
                                      Y = trench_y,
                                      GroundPos = ground_pos,
                                      Parallel = parallel);
    LibraryCall DigTrench (X = trench_x, Y = trench_y, GroundPos = ground_pos,
                           Length = trench_length, BiteDepth = 0.05,
                           NumPasses = 2, Parallel = parallel);
    LibraryCall RemoveTailings (X = trench_x, Y = trench_y,
                                GroundPos = ground_pos, Parallel = parallel);
    LibraryCall CollectSample (X = trench_x, Y = trench_y,
                               GroundPos = ground_pos, Depth = 0.11,
                               Length = trench_length, Parallel = parallel);
    LibraryCall Stow();
    LibraryCall StartSampleAnalysis;
    log_info ("Reference Mission 1, Sol 0 complete.");
  }
}
