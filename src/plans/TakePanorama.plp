// __BEGIN_LICENSE__
// Copyright (c) 2018-2019, United States Government as represented by the
// Administrator of the National Aeronautics and Space Administration. All
// rights reserved.
// __END_LICENSE__

Command log_info (...);
Command log_warning (...);
Command log_error (...);
Command TiltAntenna (Real);
Command PanAntenna (Real);
Command TakePicture();

Real Lookup VertFOV;
Real Lookup HorizFOV;

TakePanorama:
{
  // All inputs are in degrees
  In Real TiltMin, TiltMax, PanMin, PanMax;
  In Real VertOverlap, HorizOverlap;

  // Later:
  //   - rows, cols
  //   - image order (top/bottom, right/left - can be enum)
  //   - image overlap PERCENT
  //   - azimuth/elevation instead of tilt/pan angles
  //   - reference frame (lander, level)

  Real D2R = 0.01745; // pi/180
  Integer LongWait = 5;
  Integer ShortWait = 2;
  Real Tilt, Pan, VertFOV, HorizFOV;
  Boolean PanoramaDone = false;

  Tilt = TiltMin;
  Pan = PanMin;
  VertFOV = Lookup(VertFOV);
  HorizFOV = Lookup(HorizFOV);

  // Tilt/Pan to min and take first picture
  log_info ("TiltMin = ", TiltMin, "PanMin = ", PanMin);
  //  TiltAntenna (TiltMin * D2R);
  TiltAntenna (0.25);
  //  PanAntenna (PanMin * D2R);
  PanAntenna (0.25);
  Wait (LongWait);
  TakePicture();
  // Should we wait after picture command?

  IterateVertically:
  {
    RepeatCondition !PanoramaDone;

    // First pan through range at current tilt
    Pan:
    {
      Boolean Done = false;
      Loop:
      {
        RepeatCondition !Done;

        if (Pan == PanMax) Done = true;
        else {
          Pan = min (Pan + HorizFOV - HorizOverlap, PanMax);
          log_info ("New pan: ", Pan, ", radians: ", Pan * D2R);
          PanAntenna (Pan * D2R);
          Wait (ShortWait);
          TakePicture();
        }
        endif;
      }
    }

    // Increment tilt for next pan
    if (Tilt == TiltMax) PanoramaDone = true;
    else {
      Tilt = min (Tilt + VertFOV - VertOverlap, TiltMax);
      log_info ("New tilt degrees: ", Tilt, ", radians: ", Tilt * D2R);
      TiltAntenna (Tilt * D2R);
      Wait (ShortWait);
    }
    endif;
  }
}
