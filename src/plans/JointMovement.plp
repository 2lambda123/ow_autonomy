// Generic invocation of a real-valued joint movement command.

// Inputs:
//   New value to be commanded (unitless here, could e.g. be degrees)
//   Name of lookup for current value of commanded value
//   Name of lookup for joint velocity
//   Name of command, which must take a single real-number argument

// Copyright (c) 2018-2020, United States Government as represented by the
// Administrator of the National Aeronautics and Space Administration. All
// rights reserved.

// Possible todos:
//  - preconditions to check for resource availability, etc.
//  - handle pan failure (e.g. retry)

#include "OceanWorldDefs.h"

Real Lookup time;
Real Lookup PanDegrees;
Real Lookup PanVelocity;
Command log_error (...);

LibraryAction RealValuedCommand (In String CommandName, In Real Value);

JointMovement: CheckedSequence
{
  In Real NewValue;
  In String CurrentValueLookup;
  In String VelocityLookup;
  In String CommandName;

  Real Tolerance = 0.5;    // degrees, made up, tweak as needed
  Real OpTimeout = 5.0;    // units?, made up, tweak as needed
  Boolean PreAchieved = false;

  // First, command the operation, if needed.
  MaybeCommand:
  {
    if (abs(Lookup((CurrentValueLookup)) - NewValue) <= Tolerance) {
      PreAchieved = true;
    }
    else LibraryCall RealValuedCommand (CommandName = CommandName,
                                        Value = NewValue);
    endif;
  }

  // If commanded, wait for movement to start
  WaitForStart:
  {
    SkipCondition PreAchieved;
    EndCondition ((abs(Lookup((VelocityLookup), 0.01)) > ZERO_VEL) ||
                  Lookup(time, 1) - WaitForStart.EXECUTING.START > OpTimeout);
  }

  // If commanded, wait for movement to stop.
  WaitForEnd:
  {
    SkipCondition PreAchieved;
    EndCondition ((abs(Lookup((VelocityLookup), 0.01)) <= ZERO_VEL) ||
                  Lookup(time, 1) - WaitForEnd.EXECUTING.START > OpTimeout);
  }

  // Report failure if needed.
  ReportFailure:
  {
    SkipCondition (PreAchieved ||
                   abs(Lookup((CurrentValueLookup)) - NewValue) <= Tolerance);
    PostCondition  false; // This forces root node to fail, a design choice.
    log_error (CommandName, " failed.");
  }
}
