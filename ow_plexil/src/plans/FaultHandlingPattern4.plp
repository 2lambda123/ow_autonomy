// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// If no faults are occurring, this plan will pan 180 degrees, 
// and then unstow and stow the arm.
// If any fault is injected, the plan will pause and wait for resolution.
// If a fault is injected during an operation, that operation will only
// halt immediately if the fault injected is associated with it directly,
// i.e. an antenna fault during panning or an arm fault during 
// unstowing or stowing.
// Otherwise, the pausing will visually become apparent when the next
// operation does not begin due to it.

#include "plan-interface.h"

LibraryAction InitializeAntennaAndArm ();

FaultHandlingPattern4:
{

  Boolean ImageInProgress = false;
  Boolean UnstowInProgress = false;
  Boolean StowInProgress = false;

  Boolean ImageDone = false;
  Boolean UnstowDone = false;
  Boolean StowDone = false;

  LibraryCall InitializeAntennaAndArm ();

  log_info ("Starting FaultHandlingPattern4 plan...");


  // Add concurrence node to contain mission and variable checker
  // Help to see what is happening with the test logic in unstow, i.e. UnstowDone, etc.

  Mission:
  {
    /*
    Image:
    {
      Repeat !ImageDone;
      Start !Lookup(AntennaFault);

      SynchronousCommand pan_antenna (180);

      log_info ("Image is done.");
      ImageDone = true;
    }
    */
    
    Unstow: // Restarting works, but it never exits after the goal is acheived - how can we check?
    {
      Repeat !UnstowDone;
      Start !Lookup(ArmFault);
      Exit UnstowDone; //&& UnstowInProgress;
      //PreCondition !UnstowDone;

      //UnstowInProgress = true;

      SynchronousCommand unstow(); // Finishes in state SUCCEEDED 
                                   // even if interrupted by fault injection

      log_info ("Unstow is done."); // This does print, but even if not fully unstowed
      UnstowDone = true;
      log_info ("UnstowDone1: ", UnstowDone); // This doesn't print, does that mean it is working?
    }

    log_info ("UnstowDone: ", UnstowDone);

    /*
    Stow:
    {
      Repeat !StowDone;
      Start !Lookup(ArmFault);

      SynchronousCommand stow();
      
      log_info ("Stow is done.");
      StowDone = true;
    }
    */

  }

  log_info ("FaultHandlingPattern4 plan complete.");

}
