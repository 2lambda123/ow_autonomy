// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// The purpose of this file was to test calling BasicFaultHandlingImage
// And more specifically, to test whether the repeat conditions work as expected
// given the injection of relevant faults (antenna and power) in this case
// We also consider battery level critical vs !batteryOK and how that affects imaging operations

// Test 1: Once image is executing, manually inject a power or antenna fault


#include "plan-interface.h"

LibraryAction MonitorPower (In Boolean continue,
                            InOut Boolean battery_temp_ok,
                            InOut Boolean battery_life_ok,
                            InOut Boolean battery_charge_ok,
                            InOut Boolean all_ok);

LibraryAction MonitorFaults (In Boolean continue,
                             InOut Boolean all_ok);

LibraryAction ImageLandingSite (In String InstanceName, In Boolean IgnoreCrash);

LibraryAction BasicFaultHandlingImage(In Boolean battery_critical,
                                      In Boolean antenna_ok,
                                      In Boolean power_ok,
                                      In Boolean image_interrupted,
                                      InOut Boolean first_image_call,
                                      InOut String string_outcome);

ImageFaultHandlingTest: Concurrence
{
  // Power monitoring
  Boolean BatteryTempOK = true;
  Boolean BatteryLifeOK = true;
  Boolean BatteryChargeOK = true;
  Boolean BatteryCritical = false;
  Real CriticallyLowCharge = 0.05;

  // Guards for mission continuation
  Boolean BatteryOK = true; // Power and temperature of battery, no fault info
  Boolean NoFaults  = true;
  Boolean MissionInProgress = true;
  Boolean ArmOK = true;
  Boolean AntennaOK = true;
  Boolean PowerOK = true;
  Boolean SystemOK = true;

  // Guards to ensure re-attempt of interrupted nodes
  Boolean ImageInterrupted = false;
  Boolean FirstImageCall = true;

  // String outcome workaround
  String StringOutcome = "Image not yet run";


  LibraryCall MonitorPower (continue = MissionInProgress,
                            battery_temp_ok = BatteryTempOK,
                            battery_life_ok = BatteryLifeOK,
                            battery_charge_ok = BatteryChargeOK,
                            all_ok = BatteryOK);

  LibraryCall MonitorFaults (continue = MissionInProgress,
                             all_ok = NoFaults);

  CheckFaults: // Was HandleFaults, but really only checks them so renamed
  {
    // Update fault guard variables, denoting fault type, if any
    Repeat MissionInProgress;
    Start MissionInProgress;
    Skip !MissionInProgress;

    // Look up fault guard variables based on current state of faults in system
    ArmOK = !Lookup(ArmFault);
    AntennaOK = !Lookup(AntennaFault);
    PowerOK = !Lookup(PowerFault);
    SystemOK = !Lookup(SystemFault);

    Wait 1;
  }

  UpdateBatteryCritical:
  {
    Repeat MissionInProgress;
    Start MissionInProgress;
    Skip !MissionInProgress;

    BatteryCritical = (Lookup(StateOfCharge) < CriticallyLowCharge);
    if BatteryCritical
    {
      log_warning
        ("Battery critical!");
    }
    //log_info ("BatteryCritical: ", BatteryCritical);
    Wait 1;
  }

  // Add HandleAntennaFaults and HandlePowerFaults and test fault handling


  Mission: UncheckedSequence
  {
    log_info ("Starting ImageFaultHandlingTest plan...");
    log_info ("Confirming compilation...");

    ImageCall: LibraryCall BasicFaultHandlingImage(battery_critical = BatteryCritical,
                                        antenna_ok = AntennaOK,
                                        power_ok = PowerOK,
                                        image_interrupted = ImageInterrupted,
                                        first_image_call = FirstImageCall,
                                        string_outcome = StringOutcome);

    // Logging for testing
    // The following lines don't work with the library call above #TODO
    // The workaround is in-progress, involves giving library calls names
    // and implementing a node within the one called that checks the outcome and gets string
    log_info ("Image string outcome: ", StringOutcome);
    log_info ("Image success: ", StringOutcome == "SUCCESS");
    log_info ("Image interrupted: ", StringOutcome == "INTERRUPTED");
    log_info ("Image failure: ", StringOutcome == "FAILURE");
    log_info ("Image skipped: ", StringOutcome == "SKIPPED");
    ImageInterrupted = (StringOutcome == "INTERRUPTED"); // This is not sufficient
    log_info("ImageInterrupted: ", ImageInterrupted);


    log_info ("ImageFaultHandlingTest plan complete.");
    MissionInProgress = false;
  }

}
