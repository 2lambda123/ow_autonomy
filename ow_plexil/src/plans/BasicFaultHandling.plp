// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// This plan builds on ReferenceMission2 by more complexly considering arm, 
// antenna, power and system faults and associated responses 
// (as opposed to just pausing as is done in ReferenceMission2)

// This goal is to minimize wasted power and lost time given mission constraints.
// In the future, this could be expanded to consider fault responses to each 
// specific fault, instead of responses to the four fault categories



#include "plan-interface.h"

Command pprint(...);

LibraryAction MonitorPower (In Boolean continue,
                            InOut Boolean battery_temp_ok,
                            InOut Boolean battery_life_ok,
                            InOut Boolean battery_charge_ok,
                            InOut Boolean all_ok);

LibraryAction MonitorFaults (In Boolean continue,
                             InOut Boolean all_ok);

LibraryAction ImageLandingSite (In String InstanceName, In Boolean IgnoreCrash);

LibraryAction IdentifySampleTarget (InOut Real X,
                                    InOut Real Y,
                                    InOut Boolean Parallel,
                                    InOut Real GroundPos);

LibraryAction DigTrench (In Real X,
                         In Real Y,
                         In Real GroundPos,
                         In Real Length,
                         In Real BiteDepth,
                         In Integer NumPasses,
                         In Boolean Parallel);

LibraryAction RemoveTailings (In Real X,
                              In Real Y,
                              In Real GroundPos,
                              In Boolean Parallel);

LibraryAction CollectSample (In Real X,
                             In Real Y,
                             In Real GroundPos,
                             In Real Depth,
                             In Real Length,
                             In Boolean Parallel);

LibraryAction StartSampleAnalysis;

ReferenceMission2: Concurrence
{
  // Guards to track current behavior #TODO: not sure if this type of guard is needed
  Boolean ImagingLandingSite = false;
 
  // Guards for mission continuation
  Boolean BatteryOK = true;
  Boolean NoFaults  = true;
  Boolean MissionInProgress = true;
  Boolean NoArmFaults = true; // Affects manipulator tasks
  Boolean NoAntennaFaults = true; // Affects panning and tilting
  Boolean NoPowerFaults = true; // Affects entire system, stop non-critical tasks
  Boolean NoSystemFaults = true; // #TODO What do these affect? What about force torque faults?

  // Power monitoring
  Boolean BatteryTempOK = true;
  Boolean BatteryLifeOK = true;
  Boolean BatteryChargeOK = true;

  LibraryCall MonitorPower (continue = MissionInProgress,
                            battery_temp_ok = BatteryTempOK,
                            battery_life_ok = BatteryLifeOK,
                            battery_charge_ok = BatteryChargeOK,
                            all_ok = BatteryOK);

  LibraryCall MonitorFaults (continue = MissionInProgress,
                             all_ok = NoFaults);

  /*WaitForBatteryHealth:
  {
    Repeat MissionInProgress;
    Start MissionInProgress && !BatteryOK;
    Skip !MissionInProgress;

    log_warning
      ("Battery health issues, mission operations nominally paused...");
    Wait 10;
  }*/

  HandleFaults:
  {
    // Update fault guard variables, denoting fault type, if any
    Repeat MissionInProgress;
    Start MissionInProgress && !NoFaults;
    Skip !MissionInProgress;

    // Look up fault guard variables based on current state of faults in system
    //NoArmFaults = !Lookup(ArmFault);
    NoAntennaFaults = !Lookup(AntennaFault);
    //NoPowerFaults = !Lookup(PowerFault);
    //NoSystemFaults = !Lookup(SystemFault); // #TODO How should these come into play?
    // #TODO What about force torque system faults?

    //pprint("** Current Fault Statuses **");
    //pprint("NoArmFaults: ", NoArmFaults);
    //pprint("NoAntennaFaults: ", NoAntennaFaults);
    //pprint("NoPowerFaults: ", NoPowerFaults);
    //pprint("NoSystemFaults: ", NoSystemFaults);
    
  }

  Mission:
  {

    // These 4 variables are assigned in the call to IdentifySampleTarget.
    Real trench_x, trench_y, ground_pos;
    Boolean parallel;

    // Max length possible is twice the radius of the arm/scoop (.48), i.e. .96.
    // However, the max value is generally not appropriate because the scoop
    // should not be inserted so deep into the ground.  Here, estimating a
    // reasonable value given the other trenching parameters used.
    Real trench_length = 0.6;

    log_info ("Starting BasicFaultHandling plan...");
    pprint("printing test");
    log_info ("testing...");

    Image:
    {
      // Start iff battery is okay and there are no relevant faults
      // Ignore power faults, monitoring tasks prioritized
      Start BatteryOK; //&& NoAntennaFaults;
      ExitCondition !(BatteryOK && NoAntennaFaults);
      log_info ("** Imaging Landing Site **");
      log_info ("** THIS IS A TEST **");
      LibraryCall ImageLandingSite(InstanceName = "BasicFaultHandling",
                                   IgnoreCrash = true);
    }

    /*Unstow:
    {
      Start BatteryOK && NoArmFaults && NoPowerFaults;
      ExitCondition !(BatteryOK && NoArmFaults && NoPowerFaults);
      log_info ("** Unstowing Arm **");
      LibraryCall Unstow;
    }

    Search:
    {
      Start BatteryOK && NoArmFaults && NoPowerFaults;
      ExitCondition !(BatteryOK && NoArmFaults && NoPowerFaults);
      log_info ("** Identifying Sample Target **");
      LibraryCall IdentifySampleTarget (X = trench_x,
                                        Y = trench_y,
                                        GroundPos = ground_pos,
                                        Parallel = parallel);
    }*/
    
    log_info ("BasicFaultHandling plan complete.");
    MissionInProgress = false;
  }

}

