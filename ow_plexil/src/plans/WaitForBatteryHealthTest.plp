// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

#include "plan-interface.h"

LibraryAction MonitorPower (In Boolean continue,
                            InOut Boolean battery_temp_ok,
                            InOut Boolean battery_life_ok,
                            InOut Boolean battery_charge_ok,
                            InOut Boolean all_ok);

LibraryAction ImageLandingSite (In String InstanceName, In Boolean IgnoreCrash);

WaitForBatteryHealthTest: Concurrence
{
  // Power monitoring
  Boolean BatteryTempOK = true;
  Boolean BatteryLifeOK = true;
  Boolean BatteryChargeOK = true;
  Real CriticallyLowCharge = 0.05;
  Boolean BatteryCritical = false;

  // Manual Testing variables
  // Use 0.04 for the variable below to test BatteryCritical (0.1 for not critical)
  Real TestStateOfCharge = 0.04;
  Boolean Test = false; // SET THIS TO TRUE TO TEST MANUALLY

  // Guards for mission continuation
  Boolean BatteryOK = true; // Power and temperature of battery, no fault info
  Boolean MissionInProgress = true;

  LibraryCall MonitorPower (continue = MissionInProgress,
                            battery_temp_ok = BatteryTempOK,
                            battery_life_ok = BatteryLifeOK,
                            battery_charge_ok = BatteryChargeOK,
                            all_ok = BatteryOK);

  WaitForBatteryHealth:
  {
    Repeat MissionInProgress;
    Start MissionInProgress; //&& !BatteryOK; // Battery issues occurring
    Skip !MissionInProgress;

    if Test
    {
      BatteryCritical = (TestStateOfCharge < CriticallyLowCharge);
    }
    else
    {
      BatteryCritical = (Lookup(StateOfCharge) < CriticallyLowCharge);
    }
    endif;

    log_info ("BatteryCritical: ", BatteryCritical);

    if BatteryCritical
    {
      log_warning
      ("Battery health issues critical, mission operations nominally paused...");
      Wait 10;
    }
    else
    {
      log_warning
      ("Non-critical battery health issues, reverting to monitoring tasks temporarily...");
      //LibraryCall BasicFaultHandlingImage(battery_critical = BatteryCritical,
      //                                  antenna_ok = AntennaOK,
      //                                  power_ok = PowerOK,
      //                                  image_interrupted = ImageInterrupted,
      //                                  first_image_call = FirstImageCall);
      Wait 10;
    }
    endif;
 
  }

  /*TestConcurrence:
  {
    Repeat MissionInProgress;
    Start MissionInProgress && Test;
    Skip !MissionInProgress;

    log_info ("MissioninProgress: ", MissionInProgress);
    Wait 10;
  }*/

  Mission: UncheckedSequence
  {
    log_info ("Starting WaitForBatteryHealthTest plan...");
    if Test
    {
      log_info ("StateOfCharge: ", TestStateOfCharge);
    }
    else
    {
      log_info ("StateOfCharge: ", Lookup(StateOfCharge));
    }
    endif;
    Wait 1;
    //Test = true;
    /*Image:
    {
      Start BatteryOK && NoFaults;
      log_info ("** Imaging Landing Site **");
      LibraryCall ImageLandingSite(InstanceName = "ReferenceMission2",
                                   IgnoreCrash = true);
    }*/
    log_info ("WaitForBatteryHealthTest plan complete.");
    MissionInProgress = false;
  }

}
