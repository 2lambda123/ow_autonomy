// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

//Takes pictures of terrain using stereocamera in front of lander and sends them to action server for processing
//Points of interest are determined by FilterType: "Brown" finds brown areas, "Dark" finds dark areas
//It chooses the best sample point and then uses guarded move to find the exact ground position of that spot
//meant as a demo to show both filter types working

#include "plan-interface.h"

LibraryAction PanAndShoot (In Real PanAngle);

IdentifySampleLocationDemo:
{
  Real result[3];
  Post Lookup (GroundFound);

  // Take pictures in front of the lander for processing in identify_sample_location
  // An alternative would be to create a new takepicture command that waits for the pointcloud or modifying the current one
  LibraryCall Tilt(Degrees = 50);
  LibraryCall PanAndShoot(PanAngle = 65);
  LibraryCall PanAndShoot(PanAngle = 70);
  LibraryCall PanAndShoot(PanAngle = 75);

  //Shows Dark filter being used
  SynchronousCommand result = identify_sample_location(3, "Dark");
  if (isKnown(result[0])){
    LibraryCall Unstow();
    // Guarded move is at attempt to find the ground position.  The chosen start
    // position is based off of the result from identify_sample_location
    LibraryCall GuardedMove (X = result[0], Y = result[1], Z = result[2]+.1,
                             DirX = 0, DirY = 0, DirZ = 1,
                             SearchDistance = 0.5);

    //check for ground position
    if (!Lookup (GroundFound)){
      log_warning ("GuardedMove failed to find ground.");
    }
    endif;
  }
  endif;


  //Shows Brown filter being used
  SynchronousCommand result = identify_sample_location(3, "Brown");
  if (isKnown(result[0])){
    LibraryCall Unstow();
    // Guarded move is at attempt to find the ground position.  The chosen start
    // position is based off of the result from identify_sample_location
    LibraryCall GuardedMove (X = result[0], Y = result[1], Z = result[2]+.1,
                             DirX = 0, DirY = 0, DirZ = 1,
                             SearchDistance = 0.5);
    if (!Lookup (GroundFound)){
      log_warning ("GuardedMove failed to find ground.");
    }
    endif;
  }
  endif;


}
