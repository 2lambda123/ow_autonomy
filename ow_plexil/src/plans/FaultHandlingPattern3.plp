// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// If no faults are occurring, this plan will pan 180 degrees, 
// and then unstow and stow the arm.
// If any fault is injected, the plan will pause and wait for resolution.
// If a fault is injected during an operation, that operation will only
// halt immediately if the fault injected is associated with it directly,
// i.e. an antenna fault during panning or an arm fault during 
// unstowing or stowing.
// Otherwise, the pausing will visually become apparent when the next
// operation does not begin due to it.

#include "plan-interface.h"

LibraryAction InitializeAntennaAndArm (InOut Boolean initialize);

FaultHandlingPattern3: Concurrence
{
  Boolean Initialize = true;
  Boolean MissionInProgress = true;

  log_info ("Starting FaultHandlingPattern3 plan...");

  LibraryCall InitializeAntennaAndArm (initialize = Initialize);

  WaitForHealth:
  {
    Repeat MissionInProgress;
    Start MissionInProgress && Lookup(SystemFault);

    log_warning
      ("System health issues, mission operations nominally paused...");
    Wait 10;
  }

  Mission:
  {

    log_info ("Starting FaultHandlingPattern3 Mission...");

    Pattern3Image:
    {
      Start !Lookup(SystemFault) && !Initialize;

      log_info ("Running Pattern3Image...");
      log_info ("Pan angle: ", 180);
      SynchronousCommand pan_antenna (180);
    }

    Pattern3Unstow:
    {
      Start !Lookup(SystemFault) && !Initialize;

      log_info ("Running Pattern3Unstow...");
      SynchronousCommand unstow();

    }

    Pattern3Stow:
    {
      Start !Lookup(SystemFault) && !Initialize;

      log_info ("Running Pattern3Stow...");
      SynchronousCommand stow();
      
    }

    log_info ("FaultHandlingPattern3 Mission complete.");
    MissionInProgress = false;
  }
}
