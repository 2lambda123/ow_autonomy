// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// This plan builds on ReferenceMission2 by more complexly considering arm, 
// antenna, power and system faults and associated responses 
// (as opposed to just pausing as is done in ReferenceMission2)

// This goal is to minimize wasted power and lost time given mission constraints.
// In the future, this could be expanded to consider fault responses to each 
// specific fault, instead of responses to the four fault categories

// For testing, we will focus only on one imaging and one arm task in this plan
// The goal is to demonstrate switching between these distinct tasks
// when faults only affect one of them

// Expected behavior:
// If no battery issues: image, unstow, and stow
// If !batteryOK and unstow/stow happening, interrupt unstow/stow, revert imaging
// Also if !batteryOK, only continue imaging until a timeout (not yet implemented)
// Also if BatteryCritical (<0.05)

#include "plan-interface.h"

BasicFaultHandling3: Concurrence
{

  // Progress guards for mission continuation
  Boolean MissionInProgress = true;
  Boolean ImageInProgress = false;
  Boolean UnstowStowInProgress = false; // not used
  Boolean AfterImage = false;

  // Fault guards for mission continuation
  Boolean NoFaults  = true; // General tracker
  Boolean SystemOK = true;  // Another general tracker
  Boolean BatteryOK = true; // Affects all tasks // TESTING #TODO set baseline to true
  Boolean ArmOK = true; // Affects manipulator tasks (includes force torque faults)
  Boolean AntennaOK = true; // Affects panning and tilting (imaging)
  Boolean PowerOK = true; // Affects entire system, stops everything

  // Power monitoring
  Boolean BatteryTempOK = true;
  Boolean BatteryLifeOK = true;
  Boolean BatteryChargeOK = true;
  Real CriticallyLowCharge = 0.05;
  Boolean BatteryCritical = false; // TESTING #TODO set baseline to false

  // UpdateBatteryCritical will check and update BatteryCritical tracker
  UpdateBatteryCritical:
  {
    Repeat MissionInProgress;
    Start MissionInProgress;
    Skip !MissionInProgress;

    BatteryCritical = (Lookup(StateOfCharge) < CriticallyLowCharge);
    if BatteryCritical
    {
      log_warning
        ("Battery critical!");
    }
    //log_info ("BatteryCritical: ", BatteryCritical);
    Wait 1;
  }


  // WaitForBatteryHealth will run the imaging task iff:
  // battery is not okay AND battery is not critical
  /*
  WaitForBatteryHealth:
  {
    Repeat MissionInProgress;
    Start MissionInProgress && !BatteryOK; // Battery issues occurring
    Skip !MissionInProgress;

    if BatteryCritical
    {
      log_warning
      ("Battery health issues critical, mission operations nominally paused...");
      Wait 10;
      // #TODO Add timeout logic
      // #TODO add a while loop
    }
    else
    {
      log_warning
      ("Non-critical battery health issues, reverting to monitoring tasks temporarily...");
      Image:
      {
        Start !BatteryCritical && !ImageInProgress; //ignoring Antenna Faults and Power Faults for Test 2
        ExitCondition BatteryCritical;
	
        Wait 1; // Added due to an error assigning ImageInProgress at the same time...
        ImageInProgress = true;

        log_info ("Running Image due to battery health...");
        SynchronousCommand pan_antenna (90);

        Wait 1;
        ImageInProgress = false;
      }
    }
    endif;
 
  }
*/

  /*// HandlePowerFaults will halt mission progress using the Wait command
  // The plan will wait until timeout or power fault resolution (if possible)
  HandlePowerFaults:
  {

    Repeat MissionInProgress;
    Start MissionInProgress && !PowerOK; // Power fault occurring
    Skip !MissionInProgress;

    log_warning
      ("Power fault occurring, mission operations nominally paused...");
    Wait 10;
    // #TODO Add timeout logic
    // #TODO add a while loop

    // This also ignores reattempting whatever node got interrupted by the power fault

  }*/

  PrintProgress:
  {
    Repeat MissionInProgress;
    log_info ("ImageInProgress: ", ImageInProgress);
    log_info ("BatteryOK: ", BatteryOK);
    Wait 1;
  }

  /*
  ResolveBatteryIssueTest:
  {
    Repeat MissionInProgress;
    Start AfterImage;
    BatteryOK = true; // to allow unstowstow to start after image has been done twice
    // first image call will be the first step of the mission and the second will be due to !batteryOK
    
  }
  */

  Mission: UncheckedSequence
  {

    log_info ("Starting BasicFaultHandling3 plan...");

    Image:
    {
      Start !BatteryCritical && !ImageInProgress; //ignoring Antenna Faults and Power Faults for Test 2
      ExitCondition BatteryCritical;

      ImageInProgress = true;

      log_info ("Running Image...");
      SynchronousCommand pan_antenna (90);

      Wait 15;
      ImageInProgress = false;
    }

    UnstowStow:
    {
      Start BatteryOK && !UnstowStowInProgress;
      ExitCondition !BatteryOK;

      UnstowStowInProgress = true;

      log_info ("Running UnstowStow...");
      SynchronousCommand unstow();
      SynchronousCommand stow();

      Wait 1;
      UnstowStowInProgress = false;
    }

    log_info ("BasicFaultHandling3 plan complete.");
    MissionInProgress = false;
  } //end mission


} //end all
